# Form implementation generated from reading ui file 'login.ui'
#
# Created by: PyQt6 UI code generator 6.4.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import csv

import pandas as pd
from PyQt6 import QtCore, QtGui, QtWidgets
import sqlite3

# import yolo
# from form import MyMainWindow
# from yolo import Ui_MainWindow
from PyQt6.QtWidgets import *
from PyQt6.QtGui import *

from PyQt6.QtCore import *


class MyMainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setWindowTitle("Bank Churner Prediction")
        df = pd.read_csv('BankChurners.csv')

        # convert dataframe to a list of dictionaries
        customers = df.to_dict('records')

        # display the list of dictionaries
        # print(employees)
        self.window = None
        self.table = QTableWidget(self)
        self.setCentralWidget(self.table)

        self.table.setColumnCount(20)
        # self.table.setColumnWidth(0, 150)
        # self.table.setColumnWidth(1, 150)
        # self.table.setColumnWidth(2, 50)

        self.table.setHorizontalHeaderLabels(customers[0].keys())
        self.table.setRowCount(len(customers))
        column_names = []
        for i in customers[0].keys():
            column_names.append(i)
        row = 0

        for e in customers:
            # print(col)
            # print('"{0}"'.format(column_names[col]))
            self.table.setItem(row, 0, QTableWidgetItem(str(e['{0}'.format(column_names[0])])))
            self.table.setItem(row, 1, QTableWidgetItem(str(e['{0}'.format(column_names[1])])))
            self.table.setItem(row, 2, QTableWidgetItem(str(e['{0}'.format(column_names[2])])))
            self.table.setItem(row, 3, QTableWidgetItem(str(e['{0}'.format(column_names[3])])))
            self.table.setItem(row, 4, QTableWidgetItem(str(e['{0}'.format(column_names[4])])))
            self.table.setItem(row, 5, QTableWidgetItem(str(e['{0}'.format(column_names[5])])))
            self.table.setItem(row, 6, QTableWidgetItem(str(e['{0}'.format(column_names[6])])))
            self.table.setItem(row, 7, QTableWidgetItem(str(e['{0}'.format(column_names[7])])))
            self.table.setItem(row, 8, QTableWidgetItem(str(e['{0}'.format(column_names[8])])))
            self.table.setItem(row, 9, QTableWidgetItem(str(e['{0}'.format(column_names[9])])))
            self.table.setItem(row, 10, QTableWidgetItem(str(e['{0}'.format(column_names[10])])))
            self.table.setItem(row, 11, QTableWidgetItem(str(e['{0}'.format(column_names[11])])))
            self.table.setItem(row, 12, QTableWidgetItem(str(e['{0}'.format(column_names[12])])))
            self.table.setItem(row, 13, QTableWidgetItem(str(e['{0}'.format(column_names[13])])))
            self.table.setItem(row, 14, QTableWidgetItem(str(e['{0}'.format(column_names[14])])))
            self.table.setItem(row, 15, QTableWidgetItem(str(e['{0}'.format(column_names[15])])))
            self.table.setItem(row, 16, QTableWidgetItem(str(e['{0}'.format(column_names[16])])))
            self.table.setItem(row, 17, QTableWidgetItem(str(e['{0}'.format(column_names[17])])))
            self.table.setItem(row, 18, QTableWidgetItem(str(e['{0}'.format(column_names[18])])))
            self.table.setItem(row, 19, QTableWidgetItem(str(e['{0}'.format(column_names[19])])))
            # print((str(e['{0}'.format(column_names[0])])))
            # self.table.setItem(row, 1, QTableWidgetItem(str(e['Customer_Age'])))
            # self.table.setItem(row, 2, QTableWidgetItem(str(e['Gender'])))
            row += 1
        # print(row)
        dock = QDockWidget('New Customer')
        dock.setFeatures(QDockWidget.DockWidgetFeature.NoDockWidgetFeatures)
        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, dock)
        # create form
        form = QWidget()
        layout = QFormLayout(form)
        form.setLayout(layout)

        self.CLIENTNUM = QLineEdit(form)
        self.CLIENTNUM.setValidator(QIntValidator())
        self.CLIENTNUM.setMaxLength(9)
        self.Gender = QComboBox(form)
        self.Gender.addItems(["M", "F"])
        self.Gender.setPlaceholderText("Choose Gender")
        self.Gender.setCurrentIndex(-1)
        self.Custormer_Age = QSpinBox(form, minimum=18, maximum=67)
        self.Custormer_Age.clear()

        layout.addRow('Client No:', self.CLIENTNUM)
        layout.addRow('Customer Age:', self.Custormer_Age)
        layout.addRow('Gender:', self.Gender)

        btn_add = QPushButton('Add')
        btn_add.clicked.connect(self.add_employee)
        layout.addRow(btn_add)

        # add delete & edit button
        toolbar = QToolBar('main toolbar')
        toolbar.setIconSize(QSize(16, 16))
        self.addToolBar(toolbar)

        add_action = QAction(QIcon('./add.png'), '&Add', self)
        add_action.triggered.connect(self.add_employee)
        # add_action.triggered.connect(self.add_employee)
        toolbar.addAction(add_action)

        delete_action = QAction(QIcon('delete.png'), '&Delete', self)
        delete_action.triggered.connect(self.delete)
        toolbar.addAction(delete_action)

        delete_button = QPushButton('Delete', form)
        delete_button.clicked.connect(self.delete)
        layout.addRow(delete_button)
        edit_action = QAction(QIcon('edit.png'), '&Edit', self)
        edit_action.triggered.connect(self.edit_employee)
        toolbar.addAction(edit_action)

        edit_button = QPushButton('Edit', form)
        edit_button.clicked.connect(self.edit_employee)
        layout.addRow(edit_button)

        search_action = QAction(QIcon('search.png'), '&Search', self)
        search_action.triggered.connect(self.search)
        toolbar.addAction(search_action)
        search_button = QPushButton('Search', form)
        search_button.clicked.connect(self.search)
        layout.addRow(search_button)
        dock.setWidget(form)

    def search(self):
        search_text, ok = QInputDialog.getText(self, 'Search', 'Enter search text:')
        if ok:
            for row in range(self.table.rowCount()):
                for col in range(self.table.columnCount()):
                    item = self.table.item(row, col)
                    # print(item.text())
                    if item and search_text in item.text():
                        self.table.setRowHidden(row, False)
                        break
                    else:
                        self.table.setRowHidden(row, True)

    def edit_employee(self):

        current_row = self.table.currentRow()
        if current_row < 0:
            return QMessageBox.warning(self, 'Warning', 'Please select a record to edit')
        client_num = self.table.item(current_row, 0).text().rstrip(".0")
        customer_age = int(self.table.item(current_row, 1).text())
        gender = self.table.item(current_row, 2).text()

        form = QWidget()
        layout = QFormLayout(form)
        form.setLayout(layout)

        self.client_num_update = QLineEdit(client_num, form)
        self.customer_age_update = QSpinBox(form, minimum=18, maximum=67)
        self.customer_age_update.setValue(customer_age)

        self.gender_update = QComboBox(form)
        self.gender_update.addItems(["M", "F"])
        self.gender_update.setPlaceholderText("Choose Gender")
        self.gender_update.setCurrentText(gender)

        layout.addRow('Client No:', self.client_num_update)
        layout.addRow('Customer Age:', self.customer_age_update)
        layout.addRow('Gender:', self.gender_update)

        btn_update = QPushButton('Update')
        btn_update.clicked.connect(lambda: self.update_employee(current_row))

        btn_cancel = QPushButton('Cancel')
        btn_cancel.clicked.connect(self.hide_edit_dock)

        layout.addRow(btn_update, btn_cancel)

        dock = QDockWidget('Edit Customer')
        dock.setObjectName('Edit Customer')
        dock.setFeatures(QDockWidget.DockWidgetFeature.NoDockWidgetFeatures)
        self.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, dock)
        dock.setWidget(form)

    def hide_edit_dock(self):
        dock = self.findChild(QDockWidget, 'Edit Customer')
        if dock is not None:
            dock.close()

        # if dock is True:
        #     print(1)
        # dock.close()

    def update_employee(self, row):
        client_num = self.client_num_update.text()
        customer_age = self.customer_age_update.text()
        gender = self.gender_update.currentText()

        self.table.setItem(row, 0, QTableWidgetItem(client_num))
        self.table.setItem(row, 1, QTableWidgetItem(customer_age))
        self.table.setItem(row, 2, QTableWidgetItem(gender))
        self.save()

        self.reset()
        self.hide_edit_dock()

        # def edit_employee(self):
        #     # get the selected row
        #     row = self.table.currentRow()
        #
        #     # make sure a row is selected
        #     if row == -1:
        #         return
        #
        #     # get the data for the selected row
        #     client_num = self.table.item(row, 0).text()
        #     customer_age = self.table.item(row, 1).text()
        #     gender = self.table.item(row, 2).text()
        #
        #     # create the edit dialog
        #     dialog = QDialog(self)
        #     dialog.setWindowTitle('Edit Customer')
        #
        #     form = QWidget(dialog)
        #     layout = QFormLayout(form)
        #     form.setLayout(layout)
        #
        #     client_num_edit = QLineEdit(client_num, form)
        #     client_num_edit.setValidator(QIntValidator())
        #     client_num_edit.setMaxLength(9)
        #
        #     customer_age_edit = QSpinBox(form, minimum=18, maximum=67)
        #     customer_age_edit.setValue(int(customer_age))
        #
        #     gender_edit = QComboBox(form)
        #     gender_edit.addItems(["M", "F"])
        #     gender_edit.setPlaceholderText("Choose Gender")
        #     gender_edit.setCurrentText(gender)
        #
        #     layout.addRow('Client No:', client_num_edit)
        #     layout.addRow('Customer Age:', customer_age_edit)
        #     layout.addRow('Gender:', gender_edit)
        #
        #     button_box = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, dialog)
        #     button_box.accepted.connect(dialog.accept)
        #     button_box.rejected.connect(dialog.reject)
        #     layout.addWidget(button_box)
        #
        #     # execute the dialog
        #     if dialog.exec_() == QDialog.Accepted:
        #         # update the table with the edited data
        #         self.table.setItem(row, 0, QTableWidgetItem(client_num_edit.text()))
        #         self.table.setItem(row, 1, QTableWidgetItem(str(customer_age_edit.value())))
        #         self.table.setItem(row, 2, QTableWidgetItem(gender_edit.currentText()))
        #         self.save()

        # self.reset()
        # self.hide_dock_widgets()

        # def update_employee(self, row):
        #     # if not self.valid():
        #     #     return
        #     # print(self.first_name_update.text())
        #     self.table.setItem(row, 0, QTableWidgetItem(self.CLIENTNUM_update.text()))
        #     self.table.setItem(row, 1, QTableWidgetItem(self.Custormer_Age_update.text()))
        #     self.table.setItem(row, 2, QTableWidgetItem(self.Gender_update.currentText()))
        self.save()

        # self.reset()
        # self.hide_dock_widgets()

    def delete(self):
        current_row = self.table.currentRow()
        if current_row < 0:
            return QMessageBox.warning(self, 'Warning', 'Please select a record to delete')

        button = QMessageBox.question(
            self,
            'Confirmation',
            'Are you sure that you want to delete the selected row?',
            QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No
        )
        if button == QMessageBox.StandardButton.Yes:
            self.table.removeRow(current_row)
            self.save()

    def valid(self):
        CLIENTNUM = self.CLIENTNUM.text().strip()
        Custormer_Age = self.Custormer_Age.text().strip()

        if not CLIENTNUM:
            QMessageBox.critical(self, 'Error', 'Please enter the Client Number')
            self.CLIENTNUM.setFocus()
            return False

        if not Custormer_Age:
            QMessageBox.critical(self, 'Error', 'Please enter the Age')
            self.Custormer_Age.setFocus()
            return False

        try:
            age = int(self.Custormer_Age.text().strip())
        except ValueError:
            QMessageBox.critical(self, 'Error', 'Please enter a valid age')
            self.Custormer_Age.setFocus()
            return False

        if age <= 0 or age >= 67:
            QMessageBox.critical(
                self, 'Error', 'The valid age is between 1 and 67')
            return False

        return True

    def reset(self):
        self.CLIENTNUM.clear()
        self.Custormer_Age.clear()
        self.Gender.setCurrentIndex(-1)

    def save(self):
        with open('BankChurners.csv', 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            # Write the header row
            header_row = []
            for column in range(self.table.columnCount()):
                header_row.append(self.table.horizontalHeaderItem(column).text())
            writer.writerow(header_row)

            # Write the data rows
            for row in range(self.table.rowCount()):
                row_data = []
                for column in range(self.table.columnCount()):
                    item = self.table.item(row, column)
                    if item is not None:
                        row_data.append(item.text())
                    else:
                        row_data.append('')
                writer.writerow(row_data)

    def add_employee(self):
        if not self.valid():
            return
        row = self.table.rowCount()
        self.table.insertRow(row)
        self.table.setItem(row, 0, QTableWidgetItem(self.CLIENTNUM.text()
                                                    )
                           )
        self.table.setItem(
            row, 1, QTableWidgetItem(self.Custormer_Age.text())
        )
        self.table.setItem(
            row, 2, QTableWidgetItem(self.Gender.currentText())
        )

        self.reset()
        self.save()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(820, 602)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(820, 602))
        MainWindow.setMaximumSize(QtCore.QSize(820, 602))
        font = QtGui.QFont()
        font.setFamily("Old English Text MT")
        font.setPointSize(11)
        MainWindow.setFont(font)
        MainWindow.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        MainWindow.setStyleSheet("background-color: rgb(18, 35, 46);")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 413, 611))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Verdana")
        self.frame.setFont(font)
        self.frame.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        self.frame.setStyleSheet("background-color: rgb(0, 124, 199);")
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setGeometry(QtCore.QRect(60, 140, 141, 71))
        font = QtGui.QFont()
        font.setFamily("Nirmala UI")
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 255, 255);")
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(60, 230, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        self.lineEdit.setFont(font)
        self.lineEdit.setStyleSheet("color: rgb(255, 255, 255);")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(parent=self.frame)
        self.label_2.setGeometry(QtCore.QRect(60, 210, 71, 20))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(8)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(18, 35, 46);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.frame)
        self.label_3.setGeometry(QtCore.QRect(60, 290, 71, 20))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(8)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("color: rgb(18, 35, 46);")
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(parent=self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(60, 310, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        self.lineEdit_2.setFont(font)
        self.lineEdit_2.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.lineEdit_2.setText("")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton.setGeometry(QtCore.QRect(60, 400, 301, 41))
        font = QtGui.QFont()
        font.setFamily("Georgia")
        font.setPointSize(11)
        self.pushButton.setFont(font)
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);\n"
                                      "border-radius: 8px;\n"
                                      "background-color: rgb(32, 54, 71);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_2.setGeometry(QtCore.QRect(252, 350, 111, 28))
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.pushButton_2.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.pushButton_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton_2.setDefault(False)
        self.pushButton_2.setFlat(True)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.frame)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 450, 71, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        self.w = None
        self.pushButton_3.setFont(font)
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.pushButton_3.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.pushButton_3.setStyleSheet("color: rgb(255,255,255);font-weight:bold")
        self.pushButton_3.setDefault(False)
        self.pushButton_3.setFlat(True)
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_7 = QtWidgets.QLabel(parent=self.frame)
        self.label_7.setGeometry(QtCore.QRect(70, 450, 151, 31))
        font = QtGui.QFont()
        font.setFamily("Lucida Fax")
        font.setPointSize(8)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("color: rgb(18, 35, 46);")
        self.label_7.setObjectName("label_7")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(510, 100, 191, 161))
        self.label_4.setText("")
        self.label_4.setPixmap(QtGui.QPixmap("C:/Users/saham/Downloads/download.png"))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(540, 280, 211, 101))
        font = QtGui.QFont()
        font.setFamily("Trebuchet MS")
        font.setPointSize(23)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("color: rgb(0, 238, 238);")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(550, 360, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Sitka Small Semibold")
        font.setPointSize(9)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(238, 251, 251);")
        self.label_6.setObjectName("label_6")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def show_new_window(self, checked):
        if self.w is None:
            self.w = MyMainWindow()
            self.w.show()

        else:
            self.w.close()  # Close window.
            self.w = None  # Discard reference.

    def loginCheck(self):
        username = self.lineEdit.text()
        password = self.lineEdit_2.text()

        connection = sqlite3.connect("Banklogin.db")
        result = connection.execute("SELECT * FROM USERS WHERE USERNAME = ? AND PASSWORD = ?", (username, password))
        if (len(result.fetchall()) > 0):
            print("User Found ! ")
            self.show_new_window()
        else:
            print("User Not Found !")
            self.showMessageBox('Warning', 'Invalid Username And Password')
        connection.close()

    def welcomeWindowShow(self):
        self.welcomeWindow = QMainWindow()
        # self.ui = yolo.Ui_MainWindow()
        self.ui.setupUi(self.welcomeWindow)
        self.welcomeWindow.show()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Login"))
        self.label_2.setText(_translate("MainWindow", "Username"))
        self.label_3.setText(_translate("MainWindow", "Password"))
        self.pushButton.setText(_translate("MainWindow", "Login"))
        self.pushButton.clicked.connect(self.loginCheck)
        self.pushButton_2.setText(_translate("MainWindow", "Forgot Password?"))
        self.pushButton_3.setText(_translate("MainWindow", "Register"))
        self.label_7.setText(_translate("MainWindow", "Don\'t have an account?"))
        self.label_5.setText(_translate("MainWindow", "MONEYWISE"))
        self.label_6.setText(_translate("MainWindow", "Snap Into A Banking!"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
